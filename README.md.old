# pmn-projet-part2

- (local) git clone dolibarr
- (local) création vhost
- (local) création dockerfile


## Commande k8s

- `kompose convert` : créer de la config depuis un docker compose
    - Valeur correcte apiVersion: apps/v1
    - Ajout selector:
      matchLabels:
      io.kompose.service: web
- `kubectl apply -f <file>.yaml` : execute un fichier deployment k8s
    - `apply <pvc>`
    - `apply <deployments>`
    - `apply <load-balancer>`
- `kubectl get pods` : liste pods actifs
- `kubectl delete pod <nom-du-pod>` : Supprime un pod

## Procédure de tests

### Démarrage des services

```bash
sudo chmod 777 /var/run/docker.sock
```

```bash
kubectl apply -f yaml/
```

```bash
minikube tunnel
```

```bash
kubectl get services
```

=> Récupérer l'External IP du service `web-load-balancer`

```bash
curl -L <external-ip>
```

=> Constater une réponse HTTP de Dolibarr

### Suppression d'un pod

```bash
kubectl get pod
```

=> Récupérer le nom d'un des deux pods web

```bash
kubectl delete pod/<nom>
```

=> Après suppression du pod, constater que la commande CURL renvoie toujours une réponse HTTP, et qu'un nouveau pod a été créé.


### Configuration de Dolibarr

Pour l'accès à la base de données, configurer Dolibarr comme suit :
- Utiliser le driver mysqli
- Utiliser le host `database`
- Utiliser le port `3306`
- Utiliser la base de données `dolibarr`
- Utiliser l'utilisateur `root`
- Utiliser le mot de passe `admin`

URL Racine : External IP du service load balancer